{
  "hash": "9f1cb4236733837846dbf410b45f3175",
  "result": {
    "markdown": "---\ntitle: \"Moving my website to Quarto\"\nauthor: \"Jihong Zhang\"\ndate: \"06/25/2023\"\ndraft: false\nformat:\n  html:\n    toc: true\n    code-fold: true # hide code by default\n    html-math-method: katex\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n> Since June 25, 2023, I start to move my website from hugo/rmarkdown/blogdown/wowchemy to quarto website. It is difficult to explain why I spend so much time on that. Perhaps because some reasons same as other bloggers:\n>\n> \\(1\\) Quarto is the next generation of rmarkdown.\n>\n> \\(2\\) Quarto is independent with R or Rstudio.\n>\n> \\(3\\) Quarto has a clean file tree for website building.\n>\n> \\(4\\) Quarto has cleaner command than hugo (i.e., \\`quarto publish netlify\\` for publishing website etc.).\n>\n> This blog serves as a note how I customize quarto website bit by bit. It will not be a comprehensive tutorial (much online resources exists) but contain be some tricks.\n\n## Useful links\n\n1.  Quarto official documentation is always the best place to starts with.\n\n[![](quarto.png){fig-align=\"center\"}](https://quarto.org)\n\n2.  Nicola Rennie's blog inspires me a lot. I feel like [Hugo ApÃ©ro](https://github.com/hugo-apero/) is the best hugo theme in the market.\n\n    [![](nrennie.png){width=\"320\" height=\"200\"}](https://nrennie.rbind.io)\n\n## Tricks of Quarto\n\n### 1. Code highlighting\n\nThe very first trick is using `format > html > code-fold: true` settings in YAML metadata in *\\_quarto.yml* (global) or *.qmd* (local) to hide the code block as `|> Code`, like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkableExtra::kbl(head(iris)) |> \n  kableExtra::kable_styling(\n    html_font = \"Maven Pro\",\n    bootstrap_options = c('striped', 'hover'),\n    font_size = 10, full_width = TRUE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover\" style=\"font-size: 10px; font-family: Maven Pro; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Sepal.Length </th>\n   <th style=\"text-align:right;\"> Sepal.Width </th>\n   <th style=\"text-align:right;\"> Petal.Length </th>\n   <th style=\"text-align:right;\"> Petal.Width </th>\n   <th style=\"text-align:left;\"> Species </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 5.1 </td>\n   <td style=\"text-align:right;\"> 3.5 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.9 </td>\n   <td style=\"text-align:right;\"> 3.0 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.7 </td>\n   <td style=\"text-align:right;\"> 3.2 </td>\n   <td style=\"text-align:right;\"> 1.3 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.6 </td>\n   <td style=\"text-align:right;\"> 3.1 </td>\n   <td style=\"text-align:right;\"> 1.5 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.0 </td>\n   <td style=\"text-align:right;\"> 3.6 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.4 </td>\n   <td style=\"text-align:right;\"> 3.9 </td>\n   <td style=\"text-align:right;\"> 1.7 </td>\n   <td style=\"text-align:right;\"> 0.4 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nNote that the code block can be numbered and added with a left border using `code-block-bg: true` and `code-block-border-left: \"#31BAE9\"`\n\nCode block now also can be shown with language `#| echo: fenced`. As the code chunk shown below, `{r}` is explicitly presented. I don't hate `#|` as the new way of chuck option setup but when I test the code chuck, I found there is a space between `#|` and option keys. For example, it should be `#| echo: fenced` rather than `#|echo:fenced`. Otherwise, quarto will ignore chunk options.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"false\"}\n```{{r}}\n#| eval: false\n#| code-fold: false\nkableExtra::kbl(head(iris)) |> \n  kableExtra::kable_styling(\n    html_font = \"Maven Pro\",\n    bootstrap_options = c('striped', 'hover'),\n    font_size = 10, full_width = TRUE)\n```\n````\n:::\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"show\"}\n```{{python}}\n#| eval: false\n#| code-fold: show\nimport numpy as np\niris = np.array(iris)\n```\n````\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}